package com.github.yiyan1992.log;

import java.lang.reflect.Method;
import java.sql.PreparedStatement;
import java.time.LocalDateTime;


public interface MyLogger {

    void debug(String info);

    void debug(PreparedStatement preparedStatement);

    void debug(PreparedStatement preparedStatement, String sql);

    void debug(PreparedStatement preparedStatement, String sql, int autoGeneratedKeys);

    void debug(PreparedStatement preparedStatement, String sql, int[] columnIndexes);

    void debug(PreparedStatement preparedStatement, String sql, String[] columnNames);

    String getClazzName();

    default void printInfo(String string) {
        StringBuilder buffer = new StringBuilder();
        LocalDateTime localDateTime = LocalDateTime.now();
        buffer.append(" [").append(localDateTime.toLocalDate()).append(localDateTime.toLocalTime()).append("]");
        buffer.append(" [").append(Thread.currentThread().getId()).append("]");
        buffer.append(" [").append(Thread.currentThread().getName()).append("]");
        buffer.append(" [").append(string).append("]");
        System.out.println(buffer.toString());
    }

    default String getAsSqlByPreparedStatement(PreparedStatement preparedStatement, String clazzName) {
        Class clazz = null;
        try {
            clazz = Class.forName(clazzName);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        assert clazz != null;

        if (clazz.isInstance(preparedStatement)) {
            try {
                Method asSql = clazz.getDeclaredMethod("asSql", boolean.class);
                return asSql.invoke(preparedStatement, false).toString();
            } catch (Exception e) {
                return preparedStatement.toString();
            }
        }
        return null;
    }

}
